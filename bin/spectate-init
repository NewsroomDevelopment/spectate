#!/usr/bin/env node
/*
spectate_init() {
  SLUG=
  # Slug prompt
  while [ -z "$SLUG" ]; do
    echo -n "Enter a slug: "
    read SLUG

    if [[ $(git ls-remote "git@github.com:spec-journalism/$SLUG" 2>&1 | head -n 1) == "ERROR:"* ]]; then
      echo "@spec-journalism/$SLUG does not exist."
      SLUG=
    fi
  done

  git remote add origin "git@github.com:spec-journalism/$SLUG.git"
  git remote -v
}*/

const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface(process.stdin, process.stdout);

const question = message =>
  new Promise((resolve, reject) => {
    rl.question(message, line => {
      if (line.length === 0)
        reject();
      else
        resolve(line);
    });
  });

function retry(fn, retries = 5, err = null) {
  if (!retries)
    return Promise.reject(err);
  return fn()
    .catch(err => retry(fn, (retries - 1), err))
}
retry(() => question('Enter a slug: '))
  .then(line => setFileKey('package.json', 'name', line))
  .then(() => question('Enter the Google Docs URL: '))
  .then(line => setFileKey('config.json', 'DOC_URL', line))
  .then(() => rl.close())
  .catch(err => {
    console.error(err);
    rl.close();
  });

// TODO: Promisify
function setFileKey(filename, key, value) {
  const file = JSON.parse(fs.readFileSync(filename).toString());
  file[key] = value;
  fs.writeFile(filename, JSON.stringify(file, null, 2), err => {
    if (err)
      console.error(err);
    console.log(JSON.stringify(file, null, 2));
  });
}
