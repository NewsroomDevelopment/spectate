#!/usr/bin/env node

const fs = require('fs');
const readline = require('readline');
const { exec } = require('child_process');

const rl = readline.createInterface(process.stdin, process.stdout);

const question = (message, validate = x => x.length > 0) =>
  new Promise((resolve, reject) => {
    rl.question(message, line => {
      if (validate && validate(line))
        resolve(line);
      else
        reject();
    });
  });

function retry(fn, retries = 5, err = null) {
  if (!retries)
    return Promise.reject(err);
  return fn()
    .catch(err => retry(fn, (retries - 1), err))
}

const googleDocsRegex = /docs\.google\.com\/document(\/u\/\d)?\/d\/[-\w]{25,}/;

function main() {
  retry(() => question('Enter a slug: '))
    .then(line => {
      setFileKey('package.json', 'name', line);
      return new Promise((resolve, reject) => {
        exec(`git ls-remote "git@github.com:spec-journalism/${line}"`, (err, stdout, stderr) => {
          if (err || stderr) return reject(stderr);
          resolve(line);
        });
      });
    })
    .then(line => {
      return new Promise((resolve, reject) => {
        exec(`git remote add origin "git@github.com:spec-journalism/${line}.git"`, (err, stdout, stderr) => {
          if (err) return reject(err);
          resolve(stdout);
        })
      })
    })
    .then(() => {
      return new Promise((resolve, reject) => {
      exec('git remote -v', (err, stdout, stderr) => {
          if (err) return reject(err);
          resolve(stdout);
        });
      })
    })
    .then(stdout => {
      console.log(stdout);
      return retry(() => question('Enter the Google Docs URL: ', googleDocsRegex.test.bind(googleDocsRegex)));
    })
    .then(line => setFileKey('config.json', 'DOC_URL', line))
    .catch(console.error)
    .finally(() => rl.close());
};

main();

function setFileKey(filename, key, value) { // TODO: Promisify
  const file = JSON.parse(fs.readFileSync(filename).toString());
  file[key] = value;
  fs.writeFile(filename, JSON.stringify(file, null, 2), err => {
    if (err)
      console.error(err);
  });
}
