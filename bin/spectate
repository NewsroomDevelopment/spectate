#!/bin/bash

# Store where spectate is installed to be able to run scripts in bin/
SPECTATE_ROOT=$( \
  cd "$(dirname $(which spectate))" && \
  cd "$(dirname $(readlink spectate))/.." && \
  pwd \
)

# Utility functions for logging
CYAN='\033[36m'; BOLD='\033[1m'; NOCOLOR='\033[0m'
log() {
  echo -e "\n${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')] ${BOLD}$1${NOCOLOR}"
  # Append newline, unless otherwise noted by the existence of a second arg
  if [ -z "$2" ]; then
    echo ""
  fi
}
log_small() {
  echo -e "\n${CYAN}$1${NOCOLOR}"
}

# Updating spectate is just git pulling in the spectate repo
spectate_update() {
  log "Updating the spectate repository..."
  (cd "$SPECTATE_ROOT" && git pull)
}

# spectate update with npm install
spectate_update_install() {
  spectate_update
  log "Installing dependencies..."
  (cd "$SPECTATE_ROOT" && npm install)
}

# Download Google Doc and write .posthtmlrlc
spectate_download() {
  log "Writing .posthtmlrc..."
  (
    set -x;
    node --no-warnings process/download-doc.js --spectate-root="$SPECTATE_ROOT"
  )
}

# Download data
spectate_download_data() {
  log "Downloading data..."
  (set -x; node --no-warnings process/download-data.js)
}

# Creates a Spectate project from scratch
spectate_create() {
  spectate_update

  # Identify a template to be used
  # TEMPLATE_NAME="$2"
  # if [ -z "$TEMPLATE_NAME" ]; then
  #   TEMPLATE_NAME="default"
  # fi

  # ALways use default template.
  TEMPLATE_NAME="default"
  TEMPLATE_PATH="$SPECTATE_ROOT/templates/$TEMPLATE_NAME"

  # if [ ! -d "$TEMPLATE_PATH" ]; then
  #   echo "Template $TEMPLATE_NAME does not exist."
  #   return
  # fi

  # Copy template into current directory
  log "Copying $TEMPLATE_NAME template..."
  cp -vRn "$TEMPLATE_PATH"/. . # Copy without overwrite

  # If $2 is "embed", set IS_EMBED to true in package.json
  TEMPLATE_OPTION="$2"
  if [ "$TEMPLATE_OPTION" = "embed" ]; then
    log_small "Setting IS_EMBED to true in package.json in spectate config..."
    (
      set -x;
      node --no-warnings "$SPECTATE_ROOT"/bin/config-project.js --is-embed
    )
  fi

  # Install node packages
  if [ -f "package.json" ]; then
    log "Installing node packages..."
    npm install
  fi

  # Create a git repo
  if [ ! -d ".git" ]; then
    log "Initializing git repository..."
    git init
  fi

  # Write default .posthtmlrc
  spectate_download

  log "Displaying git status:"
  git status
}

# Set remote links for a newly created project
spectate_init() {
  log "Prompting for remote links..."
  (set -x; node --no-warnings "$SPECTATE_ROOT"/bin/spectate-init.js)
}

# Clones a spectate project repository and installs node packages
spectate_clone() {
  spectate_update

  log "Cloning repository..."
  if git clone git@github.com:graphicsdesk/"$2".git ; then
    log "Installing node packages..."
    npm --prefix "$2" install "$2"
  fi
}

# Clears dist folder and builds for production
spectate_build() {
  log "Creating production build..." 0
  rm -f dist/*
  npm run build
}

# Uploads assets to S3 using AWS Node SDK
upload_assets() {
  log "Uploading assets..."
  node "$SPECTATE_ROOT"/bin/upload-assets.js
}

# Builds and uploads assets
publish() {
  spectate_build
  upload_assets
}

# Uploads assets to S3 using AWS Node SDK
prepublish() {
  log "Setting public S3 URL..."
  node --no-warnings "$SPECTATE_ROOT"/bin/prepublish.js # suppress fs.promises warning
}

# Publishes on a gh-pages branch which lives in a working tree in dist
gh_publish() {
  # Check out gh-pages into a new working tree in dist if one doesn't already exist
  if [[ $(git worktree list) != *"/dist "* ]]; then
    log "Checking out new gh-pages branch into dist working tree"
    rm -rf dist
    mkdir dist
    git worktree add dist -B gh-pages
    rm -rf dist/* dist/.gitignore dist/.posthtmlrc
  fi

  publish

  log "Pushing changes to origin gh-pages..."
  (cd dist; git add .; git commit -m 'Deploy to gh-pages'; git push origin gh-pages -f)
}

spectate_config_docs() {
  log "Authorizing Google user..."
  node "$SPECTATE_ROOT"/bin/config-docs.js
}

# Takes intended command
COMMAND=$1

case $COMMAND in
  create) spectate_create "$@" ;;
  init) spectate_init ;;
  clone) spectate_clone "$@" ;;
  download) spectate_download ;;
  download-data) spectate_download_data ;;
  build) spectate_build ;;
  upload-assets) upload_assets ;;
  prepublish) prepublish ;;
  publish) publish ;;
  gh-publish) gh_publish ;;
  config-docs) spectate_config_docs ;;
  update) spectate_update ;;
  update-install) spectate_update_install ;;

  *)
    if [ -z "$COMMAND" ]; then
      echo "usage: spectate <command>"
      echo
      echo "These are common Spectate commands:"
      echo "  create        Create a Spectate project"
      echo "  init          Set remote links for a newly created project"
      echo "  clone         Clone an existing Spectate project"
      echo "  download      Download the Google Doc"
      echo "  build         Clear the contents of dist/ and npm run build"
      echo "  prepublish    Configure public S3 URL"
      echo "  publish       Build and upload assets"
      echo "  gh-publish    Publish and push to a gh-pages branch"
      echo "  config-docs   Reset Google Docs authentication"
      echo "  update        Update Spectate itself"
    else
      echo "Unknown command: $COMMAND"
    fi
esac
