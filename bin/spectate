#!/bin/bash

OLDWD="$PWD"
cd "$(dirname $(which spectate))" && cd "$(dirname $(readlink spectate))/.."
SPECTATE_ROOT="$PWD"
cd "$OLDWD"

COMMAND=$1

CYAN='\033[36m'; BOLD='\033[1m'; NOCOLOR='\033[0m'
log() {
  echo -e "\n${CYAN}[$(date '+%Y-%m-%d %H:%M:%S')] ${BOLD}$1${NOCOLOR}\n"
}

spectate_update() {
  log "Updating the spectate repository..."
  cd "$SPECTATE_ROOT"
  git pull
  cd "$OLDWD"
}

spectate_create() {
  log "Copying default template and keys..."
  cp -vR "$SPECTATE_ROOT/template"/. .
  cp -vR "$SPECTATE_ROOT/keys"/*.json ./process

  if [ -f package.json ]; then
    log "Installing node packages..."
    npm install
  fi

  if [ ! -d ".git" ]; then
    log "Initiating git repository..."
    git init
  fi

  git add .
  git status
}

spectate_clone() {
  log "Cloning repository..."
  if git clone git@github.com:spec-journalism/$2.git ; then
    log "Copying keys..."
    cp -vR "$SPECTATE_ROOT/keys"/*.json $2/process
    log "Installing node packages..."
    npm --prefix $2 install $2
  fi
}

spectate_build() {
  rm -rf dist/.*
  npm run build
}

# Creates a gh-pages branch if it doesn't exist
create_ghp_branch() {
  if [[ $(git branch) != *"gh-pages"* ]]; then
    old_branch=$(git rev-parse --abbrev-ref HEAD)
    git checkout -b gh-pages
    git checkout $old_branch
  fi
}

gh_deploy() {
  create_ghp_branch
  if [[ $(git worktree list) != *"/dist "* ]]; then # No dist worktree
    rm -rf dist
    git worktree prune
    mkdir dist
    git worktree add dist gh-pages
  fi

  spectate_build
  cd dist
  git add .
  git commit -m 'Deploy to gh-pages'
  git push origin gh-pages
  cd ..
}

upload_assets() {
  # set_aws_slug
  # aws s3 rm s3://spectator-static-assets/$(slug)/ --recursive --exclude "*" --include "*" --profile=spec
  # aws s3 cp dist/ s3://spectator-static-assets/$(slug)/ --recursive --exclude "*" --include "*" --acl=public-read --profile=spec
}

arc_deploy() {
  spectate_build
  upload_assets
}

case $COMMAND in
  update) spectate_update ;;
  create) spectate_create ;;
  clone) spectate_clone "$@" ;;
  download) node process/download-doc.js ;; # TODO: centralize this function so keys don't have to be copied
  build) spectate_build ;;
  gh-deploy) gh_deploy ;;
  arc-deploy) arc_deploy ;;
  init) node $SPECTATE_ROOT/bin/spectate-init "$@" ;;
  config-docs) node $SPECTATE_ROOT/bin/config-docs.js "$@" ;;

  *) 
    if [ -z $COMMAND ]; then
      echo "usage: spectate <command>"
      echo
      echo "These are common Spectate commands:"
      echo "  create        Create a project from a template"
      echo "  init          Set remote links"
      echo "  download      Download the Google Doc"
      echo "  update        Update Spectate itself"
      echo "  gh-deploy     Deploy to GitHub Pages"
      echo "  arc-deploy    Build and upload assets to S3"
      echo "  build         Clear the contents of dist/ and build"
      echo "  config-docs   Reset Google Docs authentication"
    else
      echo "Unknown command: $COMMAND"
    fi
esac
